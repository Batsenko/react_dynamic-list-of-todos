{"version":3,"sources":["User.js","TodoItem.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["User","props","react_default","a","createElement","Fragment","user","name","username","email","TodoItem","todo","id","title","completed","toString","src_User","TodoList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","todos","todoList","map","value","objectSpread","userList","findIndex","userId","key","b","query","queryObject","compare","compareBy","setState","sort","onClick","sortTable","bind","index","src_TodoItem","React","Component","App","buttonState","users","url","fetch","then","res","json","data","_this2","Promise","all","loadUrl","_ref","_ref2","slicedToArray","loadContent","disabled","src_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7a30f01e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction User(props) {\r\n  return (\r\n  <>\r\n    <td>\r\n    {props.user.name}\r\n    </td>\r\n    <td>\r\n    {props.user.username}\r\n    </td>\r\n    <td>\r\n    {props.user.email}\r\n    </td>\r\n  </>\r\n  );\r\n}\r\n\r\nexport default User;\r\n","import React from 'react';\r\nimport User from \"./User.js\";\r\n\r\nfunction TodoItem(props) {\r\n  return (\r\n  <tr>\r\n    <td>\r\n    {props.todo.id}\r\n    </td>\r\n    <td>\r\n    {props.todo.title}\r\n    </td>\r\n    <td>\r\n    {props.todo.completed.toString()}\r\n    </td>\r\n  <User user={props.todo.user} />\r\n  </tr>\r\n  );\r\n}\r\n\r\nexport default TodoItem ;\r\n","import React from 'react';\r\nimport TodoItem from \"./TodoItem.js\"\r\n\r\nclass TodoList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    todos: props.todoList.map((value) => {\r\n    return {\r\n      ...value,\r\n      user: props.userList[props.userList.findIndex((user) => user.id === value.userId)]\r\n    }\r\n    })\r\n    }\r\n  }\r\n  \r\n  compareBy(key) {\r\n    return function (a, b) {\r\n    if (a[key] < b[key]) return -1;\r\n    if (a[key] > b[key]) return 1;\r\n    return 0;\r\n    };\r\n  }\r\n  \r\n  sortTable(query, queryObject) {\r\n    let compare = this.compareBy(query);\r\n    \r\n    this.setState({\r\n    todos: this.state.todos.sort((a, b) => {\r\n    switch(queryObject) {\r\n      case null: {\r\n      return compare(a, b);\r\n      }\r\n      default: {\r\n      return compare(a[queryObject], b[queryObject]);\r\n      }\r\n    }\r\n    })\r\n    })\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n    <table>\r\n    <tbody>\r\n    <tr>\r\n    <th onClick={this.sortTable.bind(this, \"id\", null)}>Id</th>\r\n    <th onClick={this.sortTable.bind(this, \"title\", null)}>Title</th>\r\n    <th onClick={this.sortTable.bind(this, \"completed\", null)}>Competed</th>\r\n    <th onClick={this.sortTable.bind(this, \"username\", \"user\")}>Username</th>\r\n    <th onClick={this.sortTable.bind(this, \"email\", \"user\")}>Email</th>\r\n    <th onClick={this.sortTable.bind(this, \"name\", \"user\")}>Name</th>\r\n    </tr>\r\n    {this.state.todos.map((value, index) => {\r\n    return (<TodoItem key={value.id} todo={value}/>)\r\n    })}\r\n    </tbody>\r\n    </table>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\nimport './App.css';\nimport TodoList from \"./TodoList.js\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    buttonState: 0,\n    todos: [],\n    users: [],\n    }\n  }\n  \n  loadUrl(url) {\n    return fetch(url)\n    .then(res => res.json())\n    .then(data => data);\n  }\n  \n  \n  loadContent() {\n    Promise.all([\n    this.loadUrl('https://jsonplaceholder.typicode.com/todos'),\n    this.loadUrl('https://jsonplaceholder.typicode.com/users')\n    ]).then( ([todos, users]) => {\n    this.setState({\n    buttonState: 2,\n    todos: todos,\n    users: users\n    });\n    });\n    this.setState({buttonState: 1});\n  }\n  \n  render() {\n    switch(this.state.buttonState) {\n      case 0: {\n        return ( <button onClick={this.loadContent.bind(this)}> Load </button>);\n      }\n    \n      case 1: {\n        return ( <button disabled> Loading... </button>);\n      }\n    \n      case 2: {\n        return <TodoList todoList={this.state.todos} userList={this.state.users} />\n      }\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n  // The URL constructor is available in all browsers that support SW.\n  const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n  if (publicUrl.origin !== window.location.origin) {\n    // Our service worker won't work if PUBLIC_URL is on a different origin\n    // from what our page is served on. This might happen if a CDN is used to\n    // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n    return;\n  }\n\n  window.addEventListener('load', () => {\n    const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n    if (isLocalhost) {\n    // This is running on localhost. Let's check if a service worker still exists or not.\n    checkValidServiceWorker(swUrl, config);\n\n    // Add some additional logging to localhost, pointing developers to the\n    // service worker/PWA documentation.\n    navigator.serviceWorker.ready.then(() => {\n      console.log(\n      'This web app is being served cache-first by a service ' +\n        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n      );\n    });\n    } else {\n    // Is not localhost. Just register service worker\n    registerValidSW(swUrl, config);\n    }\n  });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n  .register(swUrl)\n  .then(registration => {\n    registration.onupdatefound = () => {\n    const installingWorker = registration.installing;\n    if (installingWorker == null) {\n      return;\n    }\n    installingWorker.onstatechange = () => {\n      if (installingWorker.state === 'installed') {\n      if (navigator.serviceWorker.controller) {\n        // At this point, the updated precached content has been fetched,\n        // but the previous service worker will still serve the older\n        // content until all client tabs are closed.\n        console.log(\n        'New content is available and will be used when all ' +\n          'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n        );\n\n        // Execute callback\n        if (config && config.onUpdate) {\n        config.onUpdate(registration);\n        }\n      } else {\n        // At this point, everything has been precached.\n        // It's the perfect time to display a\n        // \"Content is cached for offline use.\" message.\n        console.log('Content is cached for offline use.');\n\n        // Execute callback\n        if (config && config.onSuccess) {\n        config.onSuccess(registration);\n        }\n      }\n      }\n    };\n    };\n  })\n  .catch(error => {\n    console.error('Error during service worker registration:', error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n  .then(response => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get('content-type');\n    if (\n    response.status === 404 ||\n    (contentType != null && contentType.indexOf('javascript') === -1)\n    ) {\n    // No service worker found. Probably a different app. Reload the page.\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister().then(() => {\n      window.location.reload();\n      });\n    });\n    } else {\n    // Service worker found. Proceed as normal.\n    registerValidSW(swUrl, config);\n    }\n  })\n  .catch(() => {\n    console.log(\n    'No internet connection found. App is running in offline mode.'\n    );\n  });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n  navigator.serviceWorker.ready.then(registration => {\n    registration.unregister();\n  });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}